#!/usr/bin/env bash
set -eo pipefail; [[ -n "$PLUSHU_TRACE" ]] && set -x

# Handle reentrant command-as-string arguments, as used by SSH
if [[ $1 == "-c" ]]; then
  xargs -xa <(printf '%s\n' "$2") "$0"
  exit
fi

# If PLUSHU_ROOT is not specially defined, use our home directory
# (or default to the home directory of the "plushu" user, if running as root)
if [[ $EUID == 0 ]]; then
  export PLUSHU_ROOT=${PLUSHU_ROOT:-~plushu}
else
  export PLUSHU_ROOT=${PLUSHU_ROOT:-$HOME}
fi

echo_missing_plushurc_msg () {
cat <<EOF
This file just needs to be present; you can create an empty one with:

\$ sudo -u plushu touch $PLUSHU_ROOT/.plushurc
EOF
}

echo_run_as_plushu_msg () {
cat <<EOF
If you meant to run plushu as the plushu user, try:

\$ sudo -iu plushu $@
EOF
}

# Source configuration variables if the config file is present -
# if the config file is not present, don't trust this as a PLUSHU_ROOT
if [[ -f $PLUSHU_ROOT/.plushurc ]]; then
  source $PLUSHU_ROOT/.plushurc

  # Ensure this is repeatable
  if [[ ! -f $PLUSHU_ROOT/.plushurc ]]; then
    echo "No $PLUSHU_ROOT/.plushurc after sourcing .plushurc" >&2
    exit 1
  fi
else
  echo "No ~/.plushurc found." >&2
  echo >&2
  if [[ "$USER" == "plushu" ]]; then
    echo_missing_plushurc_msg >&2
  else
    echo_run_as_plushu_msg >&2
  fi
  exit 1
fi

# Echo all commands if PLUSHU_TRACE was set in .plushurc
[[ -n "$PLUSHU_TRACE" ]] && set -x

# For instances where a glob has no matches we want an empty list
shopt -s nullglob

sourcelist=
# Load numbered scripts in plugins into sourcelist
load_sourcelist () {
  # Initialize the empty list
  sourcelist=()

  # For each null-separated "line"
  while IFS= read -rd '' scriptline; do
    # Append the hook's filename to the list of hooks
    sourcelist+=("${scriptline#*/}")
  # Echo the potential hook names to numerically sort (filename first),
  # zero-separated to avoid any possible whitespace-in-filename issues,
  # then direct the zero-separated hook names to `read`
  # via process substitution (see http://mywiki.wooledge.org/BashFAQ/024)
  done < <(for script in "$PLUSHU_ROOT"/plugins/*/"$1"/*; do
    printf '%s\0' "${script##*/}/$script"
  done | sort -nz)
}

# Source pre-opts
load_sourcelist pre-opts
for script in "${sourcelist[@]}" "$PLUSHU_ROOT/plugins"/*/pre-opts; do
  # If the path is a file (not a folder)
  if [[ -f "$script" ]]; then
    plugin_subpath=${script#$PLUSHU_ROOT/plugins/}
    PLUSHU_PLUGIN_NAME=${plugin_subpath%%/*} source "$script"
  fi
done

# Process options
while [[ "x$1" == x-* ]]; do case "$1" in
  --trace|-t)
    export PLUSHU_TRACE=1
    set -x
    shift
    ;;

  --version|-v)
    if [[ -d "$PLUSHU_ROOT/.git" ]]; then
      GIT_DIR="$PLUSHU_ROOT/.git" git describe
      exit 0
    else
      echo "No .git directory in $PLUSHU_ROOT, version unknown" >&2
      exit 1
    fi
    ;;

  --)
    # explicitly stop processing arguments
    # for when the command name (for some inexplicable reason)
    # starts with a hyphen (nobody should ever do that)
    shift
    break
    ;;

  -)
    # hyphen is not an option
    echo "Unrecognized option: -" >&2
    exit 1
    ;;

  --*)
    opt="${1%%=*}"
    optfiles=("$PLUSHU_ROOT/plugins"/*"/long-opts/${opt#--}")
    if [[ -n "${optfiles[@]}" ]]; then
      for optscript in "${optfiles[@]}"; do
        source "$optscript"
      done
    else
      echo "Unrecognized option: $1" >&2
      exit 1
    fi
    ;;

  -*)
    opt="${1:1:1}"
    optfiles=("$PLUSHU_ROOT/plugins"/*"/short-opts/$opt")
    if [[ -n "${optfiles[@]}" ]]; then
      for optscript in "${optfiles[@]}"; do
        source "$optscript"
      done
    else
      echo "Unrecognized option: $1" >&2
      exit 1
    fi
    ;;
esac done

# Source pre-commands
load_sourcelist pre-commands
for script in "${sourcelist[@]}" "$PLUSHU_ROOT/plugins"/*/pre-commands; do
  # If the path is a file (not a folder)
  if [[ -f "$script" ]]; then
    plugin_subpath=${script#$PLUSHU_ROOT/plugins/}
    PLUSHU_PLUGIN_NAME=${plugin_subpath%%/*} source "$script"
  fi
done

# If a pre-commands hook didn't handle the command
if [[ -z "$PLUSHU_COMMAND_HANDLED" ]]; then
  # Run command/subcommand script
  if [[ -x "$PLUSHU_ROOT/plugins/$1/command" ]]; then
    PLUSHU_PLUGIN_NAME=$1 "$PLUSHU_ROOT/plugins/$1/command" "$@"
    PLUSHU_COMMAND_HANDLED=$1
  elif [[ -x "$PLUSHU_ROOT/plugins/${1%%:*}/subcommands/${1#*:}" ]]; then
    PLUSHU_PLUGIN_NAME=${1%%:*} \
      "$PLUSHU_ROOT/plugins/${1%%:*}/subcommands/${1#*:}" "$@"
    PLUSHU_COMMAND_HANDLED=$1
  fi
fi

# If there wasn't a command script to handle it
if [[ -z "$PLUSHU_COMMAND_HANDLED" ]]; then
  # Source commands
  load_sourcelist commands
  for script in "$PLUSHU_ROOT/plugins"/*/commands "${sourcelist[@]}"; do
    # If the path is a file (not a folder)
    if [[ -f "$script" ]]; then
      plugin_subpath=${script#$PLUSHU_ROOT/plugins/}
      PLUSHU_PLUGIN_NAME=${plugin_subpath%%/*} source "$script"
    fi
  done
fi

# If the command has *still* not been handled
if [[ -z "$PLUSHU_COMMAND_HANDLED" ]]; then
  echo "Command not found: $1"
fi
