#!/usr/bin/env bash
set -eo pipefail; [[ -n "$PLUSHU_TRACE" ]] && set -x

check_plushu_user () {
  # let id fail us out if PLUSHU_USER doesn't exist
  id "$PLUSHU_USER" >/dev/null || exit "$?"

  # If the PLUSHU_ROOT is not explicitly defined
  if [[ -z "$PLUSHU_ROOT" ]]; then
    # use PLUSHU_USER's home directory
    PLUSHU_ROOT=`getent passwd "$PLUSHU_USER" | cut -d: -f6`
  fi
}

# If the PLUSHU_USER is not explicitly defined
if [[ -z "$PLUSHU_USER" ]]; then
  # If PLUSHU_ROOT is explicitly defined
  if [[ -n "$PLUSHU_ROOT" ]]; then
    # Default to the owner of PLUSHU_ROOT
    PLUSHU_USER=`ls -ld "$PLUSHU_ROOT" | cut -d' ' -f3`
  # If PLUSHU_ROOT is not explicitly defined
  else
    # If the current user is root
    if [[ "$EUID" == 0 ]]; then
      # Use whatever user is using sudo, or default to "plushu"
      PLUSHU_USER=${SUDO_USER:-plushu}
      check_plushu_user
    # For any non-root user
    else
      # use the current user
      PLUSHU_USER=`id -un`
      # use the current user's home as the default PLUSHU_ROOT
      PLUSHU_ROOT=${PLUSHU_ROOT:-$HOME}
    fi
  fi
# If PLUSHU_USER is explicitly defined
else
  check_plushu_user
fi

# Export Plushu's config values to commands and hooks
export PLUSHU_USER
export PLUSHU_ROOT

# Set up the root for plugins to use and the plugins dir
export PLUSHU_DIR=$PLUSHU_ROOT
export PLUSHU_PLUGINS_DIR=$PLUSHU_DIR/plugins

echo_missing_plushurc_msg () {
cat <<EOF
This file just needs to be present; you can create an empty one with:

\$ sudo -u plushu touch $PLUSHU_ROOT/.plushurc
EOF
}

echo_run_as_plushu_msg () {
cat <<EOF
If you meant to run plushu as the plushu user, try:

\$ sudo -iu plushu $@
EOF
}

# Source configuration variables if the config file is present -
# if the config file is not present, don't trust this as a PLUSHU_ROOT
if [[ -f "$PLUSHU_ROOT/.plushurc" ]]; then
  source "$PLUSHU_ROOT/.plushurc"

  # Ensure this is repeatable
  if [[ ! -f "$PLUSHU_ROOT/.plushurc" ]]; then
    echo "No $PLUSHU_ROOT/.plushurc after sourcing .plushurc" >&2
    exit 1
  fi
else
  echo "No ~/.plushurc found." >&2
  echo >&2
  if [[ "$PLUSHU_USER" == "plushu" ]]; then
    echo_missing_plushurc_msg >&2
  else
    echo_run_as_plushu_msg >&2
  fi
  exit 1
fi

# Echo all commands if PLUSHU_TRACE was set in .plushurc,
# and stop echoing them if it was unset
[[ -n "$PLUSHU_TRACE" ]] && set -x || set +x

# For instances where a glob has no matches we want an empty list
shopt -s nullglob

# Load numbered scripts in plugins into sourcelist
load_sourcelist () {
  # Initialize the empty list
  sourcelist=()

  # For each null-separated "line"
  while IFS= read -rd '' scriptline; do
    # Append the hook's filename to the list of hooks
    sourcelist+=("${scriptline#*/}")
  # Echo the potential hook names to numerically sort (filename first),
  # zero-separated to avoid any possible whitespace-in-filename issues,
  # then direct the zero-separated hook names to `read`
  # via process substitution (see http://mywiki.wooledge.org/BashFAQ/024)
  done < <(for script in "$PLUSHU_PLUGINS_DIR"/*/"$1"/*.sh; do
    printf '%s\0' "${script##*/}/$script"
  done | sort -z $2)
}

# Source profiles
load_sourcelist profile
for script in "$PLUSHU_PLUGINS_DIR"/*/profile.sh "${sourcelist[@]}"; do
  plugin_subpath=${script#$PLUSHU_PLUGINS_DIR/}
  plugin_name=${plugin_subpath%%/*}
  PLUSHU_PLUGIN_NAME="$plugin_name" \
  PLUSHU_PLUGIN_PATH="$PLUSHU_PLUGINS_DIR/$plugin_name" \
    source "$script"
done

# Source pre-opts
load_sourcelist pre-opts -n
for script in "${sourcelist[@]}" "$PLUSHU_PLUGINS_DIR"/*/pre-opts.sh; do
  plugin_subpath=${script#$PLUSHU_PLUGINS_DIR/}
  plugin_name=${plugin_subpath%%/*}
  PLUSHU_PLUGIN_NAME="$plugin_name" \
  PLUSHU_PLUGIN_PATH="$PLUSHU_PLUGINS_DIR/$plugin_name" \
    source "$script"
done

# Process options
while [[ "$1" == -* ]]; do case "$1" in
  --)
    # explicitly stop processing arguments
    # for when the command name (for some inexplicable reason)
    # starts with a hyphen (nobody should ever do that)
    shift
    break
    ;;

  -)
    # hyphen is not an option
    break
    ;;

  --*)
    opt="${1%%=*}"
    optfiles=("$PLUSHU_PLUGINS_DIR"/*"/long-opts/${opt#--}.sh")
    if [[ -n "${optfiles[@]}" ]]; then
      for optscript in "${optfiles[@]}"; do
        plugin_subpath=${optscript#$PLUSHU_PLUGINS_DIR/}
        plugin_name=${plugin_subpath%%/*}
        PLUSHU_PLUGIN_NAME="$plugin_name" \
        PLUSHU_PLUGIN_PATH="$PLUSHU_PLUGINS_DIR/$plugin_name" \
          source "$optscript"
      done
    else
      break
    fi
    ;;

  -*)
    opt="${1:1:1}"
    optfiles=("$PLUSHU_PLUGINS_DIR"/*"/short-opts/$opt.sh")
    if [[ -n "${optfiles[@]}" ]]; then
      for optscript in "${optfiles[@]}"; do
        plugin_subpath=${optscript#$PLUSHU_PLUGINS_DIR/}
        plugin_name=${plugin_subpath%%/*}
        PLUSHU_PLUGIN_NAME="$plugin_name" \
        PLUSHU_PLUGIN_PATH="$PLUSHU_PLUGINS_DIR/$plugin_name" \
          source "$optscript"
      done
    else
      break
    fi
    ;;
esac done

# Source pre-commands
load_sourcelist pre-commands -n
for script in "${sourcelist[@]}" "$PLUSHU_PLUGINS_DIR"/*/pre-commands.sh; do
  plugin_subpath=${script#$PLUSHU_PLUGINS_DIR/}
  plugin_name=${plugin_subpath%%/*}
  PLUSHU_PLUGIN_NAME="$plugin_name" \
  PLUSHU_PLUGIN_PATH="$PLUSHU_PLUGINS_DIR/$plugin_name" \
    source "$script"
done

# If a pre-commands hook didn't handle the command
if [[ -z "$PLUSHU_COMMAND_HANDLED" ]]; then
  # Run command/subcommand script
  if [[ -x "$PLUSHU_PLUGINS_DIR/$1/command" ]]; then
    PLUSHU_PLUGIN_NAME="$1" PLUSHU_PLUGIN_PATH="$PLUSHU_PLUGINS_DIR/$1" \
      "$PLUSHU_PLUGINS_DIR/$1/command" "$@"
    PLUSHU_COMMAND_HANDLED=$1
  elif [[ -x "$PLUSHU_PLUGINS_DIR/${1%%:*}/subcommands/${1#*:}" ]]; then
    PLUSHU_PLUGIN_NAME="${1%%:*}" \
    PLUSHU_PLUGIN_PATH="$PLUSHU_PLUGINS_DIR/${1%%:*}" \
      "$PLUSHU_PLUGINS_DIR/${1%%:*}/subcommands/${1#*:}" "$@"
    PLUSHU_COMMAND_HANDLED=$1
  fi
fi

# If there wasn't a command script to handle it
if [[ -z "$PLUSHU_COMMAND_HANDLED" ]]; then
  # Source commands
  load_sourcelist commands -n
  for script in "$PLUSHU_PLUGINS_DIR"/*/commands.sh "${sourcelist[@]}"; do
    plugin_subpath=${script#$PLUSHU_PLUGINS_DIR/}
    plugin_name=${plugin_subpath%%/*}
    PLUSHU_PLUGIN_NAME="$plugin_name" \
    PLUSHU_PLUGIN_PATH="$PLUSHU_PLUGINS_DIR/$plugin_name" \
      source "$script"
  done
fi

# If the command has *still* not been handled
if [[ -z "$PLUSHU_COMMAND_HANDLED" ]]; then
  if [[ "$1" == -* ]]; then
    echo "Unrecognized option: $1" >&2
  else
    echo "Command not found: $1" >&2
  fi
  exit 1
fi
