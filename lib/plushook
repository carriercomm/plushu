#!/usr/bin/env bash
set -eo pipefail; [[ -n "$PLUSHU_TRACE" ]] && set -x

# For instances where a glob has no matches we want an empty list
shopt -s nullglob

# Get input flag
if [[ "$1" == "-i" ]]; then
  input=true
  shift
fi

# Separate the hook name from the extra arguments
hookname=$1
shift

# Ensure we have a hook name
if [[ -z "$hookname" ]]; then
  echo "plushook: missing hook name" >&2
  exit 1
fi

# Ensure we have a root directory
if [[ -z "$PLUSHU_ROOT" ]]; then
  echo "plushook: PLUSHU_ROOT not defined" >&2
  exit 1
fi

# Derive the other requisite directories if missing
if [[ -z "$PLUSHU_DIR" ]]; then
  export PLUSHU_DIR=$PLUSHU_ROOT
fi
if [[ -z "$PLUSHU_PLUGINS_DIR" ]]; then
  export PLUSHU_PLUGINS_DIR=$PLUSHU_DIR/plugins
fi

hooks=()

# For each null-separated "line"
while IFS= read -rd '' hookline; do
  # Append the hook's filename to the list of hooks
  if [[ -f "$1" && -x "$1" ]]; then
    hooks+=("$1")
  fi
# Echo the potential hook names to numerically sort (filename first),
# zero-separated to avoid any possible whitespace-in-filename issues,
# then direct the zero-separated hook names to `read`
# via process substitution (see http://mywiki.wooledge.org/BashFAQ/024)
done < <( {
  for hook in "$PLUSHU_PLUGINS_DIR"/*/"hooks/$hookname"/*; do
    printf '%s\0' "${hook##*/}/$hook"
  done
  # Support for deprecated non-numbered hooks (see issue #48)
  for hook in "$PLUSHU_PLUGINS_DIR"/*/"hooks/$hookname"; do
    printf '0/%s\0' "$hook"
  done
} | sort -nz)

# If we have only one hook
if [[ "${#hooks[@]}" == 1 ]]; then
  # Run it directly, only exposing input if opted in
  subpath=${hooks[0]#$PLUSHU_PLUGINS_DIR/}
  name=${subpath%%/*}
  if [[ -n "$input" ]]; then
    PLUSHU_PLUGIN_NAME="$name" \
    PLUSHU_PLUGIN_PATH="$PLUSHU_PLUGINS_DIR/$name" \
      "${hooks[0]}" "$@"
  else
    PLUSHU_PLUGIN_NAME="$name" \
    PLUSHU_PLUGIN_PATH="$PLUSHU_PLUGINS_DIR/$name" \
      "${hooks[0]}" "$@" </dev/null
  fi

# If we have more than one hook
elif [[ "${#hooks[@]}" != 0 ]]; then

  # If we're supposed to multiplex stdin, save it to a temp file
  if [[ -n "$input" ]]; then
    input=`mktemp`;
    cat >"$input"
  fi

  # Run each hook, directing our saved input (if we have any) to it
  for hook in "${hooks[@]}"; do
    subpath=${hook#$PLUSHU_PLUGINS_DIR/}
    name=${subpath%%/*}
    if [[ -n "$input" ]]; then
      PLUSHU_PLUGIN_NAME="$name" \
      PLUSHU_PLUGIN_PATH="$PLUSHU_PLUGINS_DIR/$name" \
        "$hook" "$@" <"$input"
    else
      PLUSHU_PLUGIN_NAME="$name" \
      PLUSHU_PLUGIN_PATH="$PLUSHU_PLUGINS_DIR/$name" \
        "$hook" "$@" </dev/null
    fi
  done

  # If we saved the input to a temporary file, clean up
  if [[ -n "$input" ]]; then
    rm "$input"
  fi
fi
